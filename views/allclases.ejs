<%- include('partials/header'); -%>

<link rel="stylesheet" href="/allclasses.css">

<div class="allclassestablegridwrapper">
    <div class="row">
      <div class="cell"><input type="text" placeholder="id" id="searchInputId"></div>
      <div class="cell"><input type="text" placeholder="Student L Name" id="searchInputStudent"></div>
      <div class="cell"><input type="text" placeholder="Teacher L Name" id="searchInputTeacher"></div>
      <div class="cell"><input type="text" placeholder="Time Slot" id="searchInputTimeSlot" disabled></div>
      <div class="cell"><input type="text" placeholder="Completed" id="searchInputCompleted" disabled></div>
      <div class="cell"><input type="text" placeholder="Problem" id="searchInputProblem" disabled></div>
    </div>
  
    <div class="allclassestablegridwrapperOverflow">
      <% lessons
        .sort(function(a, b) {
          return a.lastName - b.lastName;
        })
        .forEach(function(element, index) { %>
        <a href="allclasses/<%= element._id %>">
          <div class="row <% if (index >= 5) { %>hidden-row<% } %>">
            <div class="cell"><%= element._id %></div>
            <div class="cell"><%= element.studentLastName %></div>
            <div class="cell"><%= element.teacherLastName %></div>
            <div class="cell"><%= moment(parseInt(element.timeSlot)).utc().format("DD MMMM HH:mm") %> - <%= moment(parseInt(element.timeSlot)).add(1, 'hour').utc().format("HH:mm") %></div>
            <div class="cell"><%= element.isCompleted.toString() %></div>
            <div class="cell"><%= element.completedProblem.toString() %></div>
          </div>
        </a>
      <% });
      %>
             <div class="row ellipsis-row">
          <div class="cell" colspan="6">...and <%= lessons.length - 5 %> more lessons</div>
        </div>

    </div>
  </div>
  

<script>
  // Get references to the input elements
  const searchInputId = document.getElementById('searchInputId');
  const searchInputStudent = document.getElementById('searchInputStudent');
  const searchInputTeacher = document.getElementById('searchInputTeacher');
  const searchInputTimeSlot = document.getElementById('searchInputTimeSlot');

  


  
  // Add event listeners to the input elements
  searchInputId.addEventListener('input', handleSearch);
  searchInputStudent.addEventListener('input', handleSearch);
  searchInputTeacher.addEventListener('input', handleSearch);
  searchInputTimeSlot.addEventListener('input', handleSearch);
  
  const allclassestablegridwrapperOverflow = document.querySelector('.allclassestablegridwrapperOverflow');
  const maxVisibleRows = 5;
  const ellipsisRow = document.querySelector('.ellipsis-row');
  
  // Function to handle the search functionality
  function handleSearch() {
    // Retrieve the input values
    const idValue = searchInputId.value.toLowerCase();
    const studentValue = searchInputStudent.value.toLowerCase();
    const teacherValue = searchInputTeacher.value.toLowerCase();
    const timeSlotValue = searchInputTimeSlot.value.toLowerCase();
  
    // Get all the rows within the allclassestablegridwrapperOverflow div
    const rows = document.querySelectorAll('.allclassestablegridwrapperOverflow .row');
  
     // Reset the visible rows counter and the ellipsis row display
  let visibleRows = 0;
  
  // Iterate over the rows and check if they match the search criteria
  rows.forEach((row, index) => {
    const idCell = row.querySelector('.cell:nth-child(1)');
    const studentCell = row.querySelector('.cell:nth-child(2)');
    const teacherCell = row.querySelector('.cell:nth-child(3)');
    const timeSlotCell = row.querySelector('.cell:nth-child(4)');
  
    // Check if the row and its cells exist
    if (idCell && studentCell && teacherCell && timeSlotCell) {
      const id = idCell.textContent;
      const student = studentCell.textContent.toLowerCase();
      const teacher = teacherCell.textContent.toLowerCase();
      const timeSlot = timeSlotCell.textContent.toLowerCase();
  
      // Check if the row matches the search criteria
      const matchesSearch =
        id.includes(idValue) &&
        student.includes(studentValue) &&
        teacher.includes(teacherValue) &&
        timeSlot.includes(timeSlotValue);
  
      // Show/hide rows based on the search criteria and maximum visible rows
      if (matchesSearch && visibleRows < maxVisibleRows) {
        row.style.display = 'grid';
        visibleRows++;
      } else {
        row.style.display = 'none';
      }
    }
  });
  
  // Show or hide the "..." row
  if (visibleRows < rows.length) {
    ellipsisRow.style.display = 'grid';
  } else {
    ellipsisRow.style.display = 'none';
  }
}

handleSearch();
</script>

<%- include('partials/footer'); -%>